C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CODE
OBJECT MODULE PLACED IN code.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<reg51.h>
   2          
   3          
   4          
   5          
   6          //Function declarations
   7          void cct_init(void);
   8          void delay(int);
   9          void lcdinit(void);
  10          void writecmd(int);
  11          void writedata(char);
  12          void serial(void);
  13          
  14          unsigned char READ_SWITCHES(void);
  15          unsigned char get_key(void);
  16          unsigned char count = 0;
  17          
  18          //*******************
  19          //Pin description
  20          /*
  21          P2 is data bus
  22          P3.7 is RS
  23          P3.6 is E
  24          P1.0 to P1.3 are keypad row outputs
  25          P1.4 to P1.7 are keypad column inputs
  26          */
  27          //********************
  28          // Define Pins
  29          //********************
  30          sbit RowA = P2^0;     //RowA
  31          sbit RowB = P2^1;     //RowB
  32          sbit RowC = P2^2;     //RowC
  33          sbit RowD = P2^3;     //RowD
  34          
  35          sbit C1   = P2^4;     //Column1
  36          sbit C2   = P2^5;     //Column2
  37          sbit C3   = P2^6;     //Column3
  38          sbit C4   = P2^7;     //Column4
  39          
  40          sbit RS    = P3^6;     //E pin for LCD
  41          sbit E   = P3^7;     //RS pin for LCD
  42          
  43          
  44          void main(void)
  45          {
  46   1         unsigned char key;                // key char for keeping record of pressed key
  47   1      
  48   1         cct_init();              // Make input and output pins as required
  49   1         lcdinit();               // Initilize LCD
  50   1      //serial() ;
  51   1         while(1)
  52   1         {
  53   2      
  54   2           key = get_key();
  55   2            {
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 2   

  56   3      TMOD = 0x20;
  57   3      TH1 = 0xFD;
  58   3      SCON = 0x50;
  59   3      TR1 =1;
  60   3      
  61   3      SBUF =key;
  62   3      while (TI == 0);
  63   3      TI = 0;
  64   3      
  65   3      }// Get pressed key
  66   2      writecmd(0x01);        // Clear screen    
  67   2      writedata(key);        // Echo the key pressed to LCD
  68   2       
  69   2         }
  70   1      
  71   1      
  72   1      }
  73          
  74          
  75          
  76          
  77          
  78          
  79          
  80          void cct_init(void)
  81          {
  82   1      P2 = 0xf0;   //used for generating outputs and taking inputs from Keypad
  83   1      P0 = 0x00;   //used as data port for LCD
  84   1      RS = 0;
  85   1      E = 0;
  86   1      }
  87          
  88          
  89          
  90          void delay( int a)
  91          {
  92   1         int i;
  93   1         for(i=0;i<a;i++);   //null statement
  94   1      }
  95          
  96          void writedata(unsigned char t)
  97          {
  98   1      
  99   1         RS = 1;             // This is data
 100   1         P0 = t;             //Data transfer
 101   1         E  = 1;             // => E = 1
 102   1         delay(150);
 103   1         E  = 0;             // => E = 0
 104   1         delay(150);
 105   1      }
 106          
 107          
 108          void writecmd(int z)
 109          {
 110   1         RS = 0;             // This is command
 111   1         P0 = z;             //Data transfer
 112   1         E  = 1;             // => E = 1
 113   1         delay(150);
 114   1         E  = 0;             // => E = 0
 115   1         delay(150);
 116   1      }
 117          
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 3   

 118          void lcdinit(void)
 119          {
 120   1      
 121   1           delay(15000);
 122   1         writecmd(0x30);
 123   1           delay(4500);
 124   1       
 125   1         writecmd(0x38);    //function set
 126   1         writecmd(0x0c);    //display on,cursor off,blink off
 127   1         writecmd(0x01);    //clear display
 128   1         writecmd(0x06);    //entry mode, set increment
 129   1      }
 130          
 131          //void Return(void)     //Return to 0 location on LCD
 132          //{
 133            //writecmd(0x02);
 134              //delay(1500);
 135          //}
 136          
 137          
 138          
 139          
 140          unsigned char READ_SWITCHES(void)
 141          {
 142   1      RowA = 0; RowB = 1; RowC = 1; RowD = 1;
 143   1      
 144   1      
 145   1         
 146   1      if (C1 == 0)
 147   1         {
 148   2        count = 0 ;
 149   2           
 150   2            delay(10000);
 151   2      if (C1 == 0)
 152   2      {
 153   3          count=count+1;
 154   3         delay(10000);
 155   3      }
 156   2      if (C1 == 0)
 157   2      {
 158   3          count=count+1;
 159   3         delay(10000);
 160   3      }
 161   2      
 162   2      
 163   2           
 164   2      switch (count)
 165   2      {
 166   3      case 0: return '7';break;
 167   3      case 1 : return 'A';break;
 168   3      case 2 :return 'B';break;
 169   3      }
 170   2      
 171   2         }
 172   1      
 173   1      
 174   1      
 175   1      
 176   1      if (C2 == 0)
 177   1      
 178   1      
 179   1      {
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 4   

 180   2        count = 0 ;
 181   2       
 182   2            delay(10000);
 183   2      if (C2 == 0)
 184   2      {
 185   3          count=count+1;
 186   3         delay(10000);
 187   3      }
 188   2      if (C2 == 0)
 189   2      {
 190   3          count=count+1;
 191   3         delay(10000);
 192   3      }
 193   2      
 194   2      
 195   2           
 196   2      switch (count)
 197   2      {
 198   3      case 0: return '8';break;
 199   3      case 1 : return 'C';break;
 200   3      
 201   3      
 202   3      case 2 :return 'D';break;
 203   3      }
 204   2      
 205   2         }
 206   1      
 207   1      
 208   1         
 209   1      
 210   1      
 211   1      if (C3 == 0)
 212   1      
 213   1      
 214   1         {
 215   2        count = 0 ;
 216   2       
 217   2            delay(10000);
 218   2      if (C3 == 0)
 219   2      {
 220   3          count=count+1;
 221   3         delay(10000);
 222   3      }
 223   2      if (C3 == 0)
 224   2      {
 225   3          count=count+1;
 226   3         delay(10000);
 227   3      }
 228   2      
 229   2           
 230   2      switch (count)
 231   2      {
 232   3      case 0: return '9';break;
 233   3      case 1 : return 'E';break;
 234   3      
 235   3      
 236   3      case 2 :return 'F';break;
 237   3      }
 238   2      
 239   2         }
 240   1      
 241   1      
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 5   

 242   1      
 243   1      if (C4 == 0)
 244   1      
 245   1      
 246   1      
 247   1       {
 248   2        count = 0 ;
 249   2       
 250   2            delay(10000);
 251   2      if (C4 == 0)
 252   2      {
 253   3          count=count+1;
 254   3         delay(10000);
 255   3      }
 256   2      if (C4 == 0)
 257   2      {
 258   3          count=count+1;
 259   3         delay(10000);
 260   3      }
 261   2      
 262   2           
 263   2      switch (count)
 264   2      {
 265   3      case 0: return '/';break;
 266   3      case 1 : return 'G';break;
 267   3      
 268   3      
 269   3      case 2 :return 'H';break;
 270   3      }
 271   2      
 272   2         }
 273   1      
 274   1      
 275   1      RowA = 1; RowB = 0; RowC = 1; RowD = 1;
 276   1      
 277   1      if (C1 == 0)
 278   1         {
 279   2        count = 0 ;
 280   2      
 281   2            delay(10000);
 282   2      if (C1 == 0)
 283   2      {
 284   3          count=count+1;
 285   3         delay(10000);
 286   3      }
 287   2      if (C1 == 0)
 288   2      {
 289   3          count=count+1;
 290   3         delay(10000);
 291   3      }
 292   2      
 293   2      
 294   2      switch (count)
 295   2      {
 296   3      case 0: return '4';break;
 297   3      case 1 : return 'I';break;
 298   3      
 299   3      case 2 :return 'J';break;
 300   3      }
 301   2      
 302   2         }
 303   1      
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 6   

 304   1      
 305   1      
 306   1      
 307   1      if (C2 == 0)
 308   1      
 309   1      
 310   1      {
 311   2        count = 0 ;
 312   2         
 313   2            delay(10000);
 314   2      if (C2 == 0)
 315   2      {
 316   3          count=count+1;
 317   3         delay(10000);
 318   3      }
 319   2      if (C2 == 0)
 320   2      {
 321   3          count=count+1;
 322   3         delay(10000);
 323   3      }
 324   2      
 325   2      
 326   2           
 327   2      switch (count)
 328   2      {
 329   3      case 0: return '5';break;
 330   3      case 1 : return 'K';break;
 331   3      
 332   3      case 2 :return 'L';break;
 333   3      }
 334   2      
 335   2         }
 336   1      
 337   1      
 338   1      
 339   1      if (C3 == 0)
 340   1      
 341   1      
 342   1         {
 343   2        count = 0 ;
 344   2      
 345   2            delay(10000);
 346   2      if (C3 == 0)
 347   2      {
 348   3          count=count+1;
 349   3         delay(10000);
 350   3      }
 351   2      if (C3 == 0)
 352   2      {
 353   3          count=count+1;
 354   3         delay(10000);
 355   3      }
 356   2      
 357   2      
 358   2           
 359   2      switch (count)
 360   2      {
 361   3      case 0: return '6';break;
 362   3      case 1 : return 'M';break;
 363   3      
 364   3      case 2 :return 'N';break;
 365   3      }
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 7   

 366   2      
 367   2         }
 368   1      
 369   1      
 370   1         if (C4 == 0)
 371   1      
 372   1      
 373   1      
 374   1       {
 375   2        count = 0 ;
 376   2      
 377   2            delay(10000);
 378   2      if (C4 == 0)
 379   2      {
 380   3          count=count+1;
 381   3         delay(10000);
 382   3      }
 383   2      if (C4 == 0)
 384   2      {
 385   3          count=count+1;
 386   3         delay(10000);
 387   3      }
 388   2      
 389   2           
 390   2      switch (count)
 391   2      {
 392   3      case 0: return '*';break;
 393   3      case 1 : return 'O';break;
 394   3      
 395   3      case 2 :return 'P';break;
 396   3      }
 397   2      
 398   2         }
 399   1      
 400   1      RowA = 1; RowB = 1; RowC = 0; RowD = 1;
 401   1      
 402   1      
 403   1      if (C1 == 0)
 404   1         {
 405   2        count = 0 ;
 406   2      
 407   2            delay(10000);
 408   2      if (C1 == 0)
 409   2      {
 410   3          count=count+1;
 411   3         delay(10000);
 412   3      }
 413   2      if (C1 == 0)
 414   2      {
 415   3          count=count+1;
 416   3         delay(10000);
 417   3      }
 418   2      
 419   2      
 420   2           
 421   2      switch (count)
 422   2      {
 423   3      case 0: return '1';break;
 424   3      case 1 : return 'Q';break;
 425   3      
 426   3      case 2 :return 'R';break;
 427   3      }
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 8   

 428   2      
 429   2         }
 430   1      
 431   1      
 432   1      
 433   1      
 434   1      if (C2 == 0)
 435   1      
 436   1      
 437   1      {
 438   2        count = 0 ;
 439   2      
 440   2            delay(10000);
 441   2      if (C2 == 0)
 442   2      {
 443   3          count=count+1;
 444   3         delay(10000);
 445   3      }
 446   2      if (C2 == 0)
 447   2      {
 448   3          count=count+1;
 449   3         delay(10000);
 450   3      }
 451   2      
 452   2      
 453   2      switch (count)
 454   2      {
 455   3      case 0: return '2';break;
 456   3      case 1 : return 'S';break;
 457   3      
 458   3      case 2 :return 'T';break;
 459   3      }
 460   2      
 461   2         }
 462   1      
 463   1      
 464   1      
 465   1      if (C3 == 0)
 466   1      
 467   1      
 468   1         {
 469   2        count = 0 ;
 470   2      
 471   2            delay(10000);
 472   2      if (C3 == 0)
 473   2      {
 474   3          count=count+1;
 475   3         delay(10000);
 476   3      }
 477   2      if (C3 == 0)
 478   2      {
 479   3          count=count+1;
 480   3         delay(10000);
 481   3      }
 482   2      
 483   2      
 484   2      
 485   2           
 486   2      switch (count)
 487   2      {
 488   3      case 0: return '3';break;
 489   3      case 1 : return 'U';break;
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 9   

 490   3      
 491   3      case 2 :return 'V';break;
 492   3      }
 493   2      
 494   2         }
 495   1      
 496   1      
 497   1         if (C4 == 0)
 498   1      
 499   1      
 500   1      
 501   1       {
 502   2        count = 0 ;
 503   2      
 504   2            delay(10000);
 505   2      if (C4 == 0)
 506   2      {
 507   3          count=count+1;
 508   3         delay(10000);
 509   3      }
 510   2      if (C4 == 0)
 511   2      {
 512   3          count=count+1;
 513   3         delay(10000);
 514   3      }
 515   2      
 516   2      
 517   2           
 518   2      switch (count)
 519   2      {
 520   3      case 0: return '-';break;
 521   3      case 1 : return 'W';break;
 522   3      
 523   3      case 2 :return 'X';break;
 524   3      }
 525   2      
 526   2         }
 527   1      
 528   1      
 529   1      
 530   1      RowA = 1; RowB = 1; RowC = 1; RowD = 0; //Test Row D
 531   1      
 532   1      if (C1 == 0)
 533   1         { delay(10000); while (C1==0); writecmd(0x01); }
 534   1      if (C2 == 0)
 535   1      
 536   1      
 537   1      {
 538   2        count = 0 ;
 539   2      
 540   2            delay(10000);
 541   2      if (C2 == 0)
 542   2      {
 543   3          count=count+1;
 544   3         delay(10000);
 545   3      }
 546   2      if (C2 == 0)
 547   2      {
 548   3          count=count+1;
 549   3         delay(10000);
 550   3      }
 551   2      
C51 COMPILER V9.60.0.0   CODE                                                              06/19/2023 19:48:50 PAGE 10  

 552   2      
 553   2           
 554   2      switch (count)
 555   2      {
 556   3      case 0: return '0';break;
 557   3      case 1 : return 'Y';break;
 558   3      
 559   3      case 2 :return 'Z';break;
 560   3      }
 561   2      
 562   2         }
 563   1      
 564   1      if (C3 == 0)
 565   1         { delay(10000); while (C3==0); return '='; }
 566   1      if (C4 == 0)
 567   1         { delay(10000); while (C4==0); return '+'; }
 568   1      
 569   1      return 'n';           // Means no key has been pressed
 570   1      }
 571          
 572          unsigned char get_key(void)           //get key from user
 573          {
 574   1      char key = 'n';              //assume no key pressed
 575   1      
 576   1      while(key=='n')              //wait untill a key is pressed
 577   1      key = READ_SWITCHES();   //scan the keys again and again
 578   1      
 579   1      return key;                  //when key pressed then return its value
 580   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    808    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
